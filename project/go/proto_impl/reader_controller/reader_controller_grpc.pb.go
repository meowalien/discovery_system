// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/reader_controller.proto

package reader_controller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReaderControllerService_CreateClient_FullMethodName         = "/controller.ReaderControllerService/CreateClient"
	ReaderControllerService_LoadClient_FullMethodName           = "/controller.ReaderControllerService/LoadClient"
	ReaderControllerService_UnLoadClient_FullMethodName         = "/controller.ReaderControllerService/UnLoadClient"
	ReaderControllerService_SignInClient_FullMethodName         = "/controller.ReaderControllerService/SignInClient"
	ReaderControllerService_CompleteSignInClient_FullMethodName = "/controller.ReaderControllerService/CompleteSignInClient"
	ReaderControllerService_ListClients_FullMethodName          = "/controller.ReaderControllerService/ListClients"
	ReaderControllerService_GetDialogs_FullMethodName           = "/controller.ReaderControllerService/GetDialogs"
	ReaderControllerService_StartReadMessage_FullMethodName     = "/controller.ReaderControllerService/StartReadMessage"
)

// ReaderControllerServiceClient is the client API for ReaderControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReaderControllerServiceClient interface {
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error)
	LoadClient(ctx context.Context, in *LoadClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnLoadClient(ctx context.Context, in *UnLoadClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignInClient(ctx context.Context, in *SignInClientRequest, opts ...grpc.CallOption) (*SignInClientResponse, error)
	CompleteSignInClient(ctx context.Context, in *CompleteSignInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	GetDialogs(ctx context.Context, in *GetDialogsRequest, opts ...grpc.CallOption) (*GetDialogsResponse, error)
	StartReadMessage(ctx context.Context, in *StartReadMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type readerControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReaderControllerServiceClient(cc grpc.ClientConnInterface) ReaderControllerServiceClient {
	return &readerControllerServiceClient{cc}
}

func (c *readerControllerServiceClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateClientResponse)
	err := c.cc.Invoke(ctx, ReaderControllerService_CreateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerControllerServiceClient) LoadClient(ctx context.Context, in *LoadClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReaderControllerService_LoadClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerControllerServiceClient) UnLoadClient(ctx context.Context, in *UnLoadClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReaderControllerService_UnLoadClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerControllerServiceClient) SignInClient(ctx context.Context, in *SignInClientRequest, opts ...grpc.CallOption) (*SignInClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInClientResponse)
	err := c.cc.Invoke(ctx, ReaderControllerService_SignInClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerControllerServiceClient) CompleteSignInClient(ctx context.Context, in *CompleteSignInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReaderControllerService_CompleteSignInClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerControllerServiceClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClientsResponse)
	err := c.cc.Invoke(ctx, ReaderControllerService_ListClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerControllerServiceClient) GetDialogs(ctx context.Context, in *GetDialogsRequest, opts ...grpc.CallOption) (*GetDialogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDialogsResponse)
	err := c.cc.Invoke(ctx, ReaderControllerService_GetDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerControllerServiceClient) StartReadMessage(ctx context.Context, in *StartReadMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReaderControllerService_StartReadMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReaderControllerServiceServer is the server API for ReaderControllerService service.
// All implementations must embed UnimplementedReaderControllerServiceServer
// for forward compatibility.
type ReaderControllerServiceServer interface {
	CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error)
	LoadClient(context.Context, *LoadClientRequest) (*emptypb.Empty, error)
	UnLoadClient(context.Context, *UnLoadClientRequest) (*emptypb.Empty, error)
	SignInClient(context.Context, *SignInClientRequest) (*SignInClientResponse, error)
	CompleteSignInClient(context.Context, *CompleteSignInRequest) (*emptypb.Empty, error)
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	GetDialogs(context.Context, *GetDialogsRequest) (*GetDialogsResponse, error)
	StartReadMessage(context.Context, *StartReadMessageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedReaderControllerServiceServer()
}

// UnimplementedReaderControllerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReaderControllerServiceServer struct{}

func (UnimplementedReaderControllerServiceServer) CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedReaderControllerServiceServer) LoadClient(context.Context, *LoadClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadClient not implemented")
}
func (UnimplementedReaderControllerServiceServer) UnLoadClient(context.Context, *UnLoadClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLoadClient not implemented")
}
func (UnimplementedReaderControllerServiceServer) SignInClient(context.Context, *SignInClientRequest) (*SignInClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInClient not implemented")
}
func (UnimplementedReaderControllerServiceServer) CompleteSignInClient(context.Context, *CompleteSignInRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSignInClient not implemented")
}
func (UnimplementedReaderControllerServiceServer) ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedReaderControllerServiceServer) GetDialogs(context.Context, *GetDialogsRequest) (*GetDialogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogs not implemented")
}
func (UnimplementedReaderControllerServiceServer) StartReadMessage(context.Context, *StartReadMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReadMessage not implemented")
}
func (UnimplementedReaderControllerServiceServer) mustEmbedUnimplementedReaderControllerServiceServer() {
}
func (UnimplementedReaderControllerServiceServer) testEmbeddedByValue() {}

// UnsafeReaderControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReaderControllerServiceServer will
// result in compilation errors.
type UnsafeReaderControllerServiceServer interface {
	mustEmbedUnimplementedReaderControllerServiceServer()
}

func RegisterReaderControllerServiceServer(s grpc.ServiceRegistrar, srv ReaderControllerServiceServer) {
	// If the following call pancis, it indicates UnimplementedReaderControllerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReaderControllerService_ServiceDesc, srv)
}

func _ReaderControllerService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderControllerServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderControllerService_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderControllerServiceServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderControllerService_LoadClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderControllerServiceServer).LoadClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderControllerService_LoadClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderControllerServiceServer).LoadClient(ctx, req.(*LoadClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderControllerService_UnLoadClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLoadClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderControllerServiceServer).UnLoadClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderControllerService_UnLoadClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderControllerServiceServer).UnLoadClient(ctx, req.(*UnLoadClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderControllerService_SignInClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderControllerServiceServer).SignInClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderControllerService_SignInClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderControllerServiceServer).SignInClient(ctx, req.(*SignInClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderControllerService_CompleteSignInClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteSignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderControllerServiceServer).CompleteSignInClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderControllerService_CompleteSignInClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderControllerServiceServer).CompleteSignInClient(ctx, req.(*CompleteSignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderControllerService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderControllerServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderControllerService_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderControllerServiceServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderControllerService_GetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderControllerServiceServer).GetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderControllerService_GetDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderControllerServiceServer).GetDialogs(ctx, req.(*GetDialogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderControllerService_StartReadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderControllerServiceServer).StartReadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderControllerService_StartReadMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderControllerServiceServer).StartReadMessage(ctx, req.(*StartReadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReaderControllerService_ServiceDesc is the grpc.ServiceDesc for ReaderControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReaderControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.ReaderControllerService",
	HandlerType: (*ReaderControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _ReaderControllerService_CreateClient_Handler,
		},
		{
			MethodName: "LoadClient",
			Handler:    _ReaderControllerService_LoadClient_Handler,
		},
		{
			MethodName: "UnLoadClient",
			Handler:    _ReaderControllerService_UnLoadClient_Handler,
		},
		{
			MethodName: "SignInClient",
			Handler:    _ReaderControllerService_SignInClient_Handler,
		},
		{
			MethodName: "CompleteSignInClient",
			Handler:    _ReaderControllerService_CompleteSignInClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _ReaderControllerService_ListClients_Handler,
		},
		{
			MethodName: "GetDialogs",
			Handler:    _ReaderControllerService_GetDialogs_Handler,
		},
		{
			MethodName: "StartReadMessage",
			Handler:    _ReaderControllerService_StartReadMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reader_controller.proto",
}
