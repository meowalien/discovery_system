name: Infrastructure Deploy

on:
  push:
    branches: [ "main" ]
    paths:
      - "infrastructure/**"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 檢出程式碼
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. 將目標主機加入 known_hosts
      - name: Add SSH keyscan for remote host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 34.81.62.96 >> ~/.ssh/known_hosts

      # 3. 產生隨機檔名，儲存在環境變數 TMPFILE 中
      - name: Generate random remote filename
        id: generate_random_name
        run: |
          RANDOM_NAME="application-$(date +%s).yaml"
          echo "TMPFILE=/tmp/$RANDOM_NAME" >> $GITHUB_ENV
        # 說明：
        #  - 以當下 Unix 時間戳記 (秒) 做為隨機數。
        #  - 也可以使用 $RANDOM、UUID 等方式來產生更加隨機的檔名。

      # 4. 將 application.yaml 上傳到遠端隨機檔名
      - name: Copy application.yaml to remote
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 34.81.62.96
          username: jackyli
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: infrastructure/application.yaml
          target: ${{ env.TMPFILE }}             # 使用前一步產生的隨機檔名
          overwrite: true
          strip_components: 1  # 這一行確保只上傳檔案本身，不包含目錄

      # 5. SSH 到遠端，執行部署指令 (minikube kubectl apply)
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: 34.81.62.96
          username: jackyli
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Applying file: ${{ env.TMPFILE }}"
            minikube kubectl -- apply -n argocd -f ${{ env.TMPFILE }}
            # 針對該隨機檔案，後續是否要刪除，由你自行選擇
            # rm -f ${{ env.TMPFILE }}