services:
  # Kafka broker
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "9092:9092"
      - "9093:9093"
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    restart: always

  postgres:
    image: postgres:12
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: discovery_system
    # 啟用 logical replication 所需的參數
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=10"]
    ports:
      - "5432:5432"
    restart: always

  temporal:
    container_name: temporal
    depends_on:
      - postgres
    environment:
      DB: postgres12
      DB_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PWD: postgres
      POSTGRES_SEEDS: postgres
    image: temporalio/auto-setup:latest
    ports:
      - 7233:7233
    restart: always

  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CLI_ADDRESS: temporal:7233
    image: temporalio/admin-tools:latest
    stdin_open: true
    tty: true
    restart: always

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000
    image: temporalio/ui:latest
    ports:
      - 8080:8080
    restart: always

  # Qdrant 向量資料庫
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    restart: always

  debezium:
    image: debezium/connect:1.9
    platform: linux/amd64 # debezium 沒有支援 arm64 架構
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
      CONNECT_PLUGIN_PATH: /kafka/connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: always

  reverse-proxy:
    image: traefik:v2.11
    command:
      - "--api.insecure=true"                      # 啟用 dashboard
      - "--providers.docker=true"                  # 開啟 docker provider
      - "--entrypoints.web.address=:80"            # 開一個 web 入口
    ports:
      - "80:80"                                     # 對外 port
      - "8000:8080"                                 # Dashboard port
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # 用來監聽 docker

  telegram_reader:
    image: telegram_reader
    labels:
      - "traefik.enable=true"
      # 所有 URL 前綴為 /telegram_reader 都會匹配此路由器
      - "traefik.http.routers.telegram_reader.rule=PathPrefix(`/telegram_reader`)"
      - "traefik.http.routers.telegram_reader.entrypoints=web"
      # 設定中介件：移除 URL 前綴 /telegram_reader，轉發到容器內對應的路由
      - "traefik.http.middlewares.telegram_reader-strip.stripprefix.prefixes=/telegram_reader"
      - "traefik.http.routers.telegram_reader.middlewares=telegram_reader-strip"
      # 指定容器內服務的對外端口，例如服務內部以 8000 執行
      - "traefik.http.services.telegram_reader.loadbalancer.server.port=8001"
    volumes:
#      mount telegram_reader_config:/app/config
      - ./telegram_reader/config.yml:/app/config.yml
    depends_on:
      - redis
      - postgres
    ports:
      - "8001:8001"
    restart: always

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      # 管理員帳號與密碼
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
    ports:
      - "8082:8080"  # 可依需求調整對外端口
    depends_on:
      - postgres
    command: [ "start-dev" ]  # 以開發模式啟動 Keycloak
    restart: always

